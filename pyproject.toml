[project]
name = "ocx"
version = "2.8.6"
description = "An extension to the Open Class 3D Exchange (OCX) standard for 3D rudder models subject to approval by the classification society."
authors = [
  { name = "Ole Christian Astrup", email = "ole.christian.astrup@dnv.com" },
]
license = { file = "LICENSE" }
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
requires-python = ">=3.10"
dependencies = [
    "xsdata",
]

[project.urls]
"Homepage" = "https://github.com/OCXStandard/OCX_Schema"
"Bug Tracker" = "https://github.com/OCXStandard/OCX_Schema/issues"


[build-system]
requires = ["flit_core >=3.8,<4"]
build-backend = "flit_core.buildapi"

[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
github_url = "https://github.com/OCXStandard/OCX_Schema"

[tool.tbump.version]
current = "2.8.6"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  (\-
    (?P<extra>.+)
  )?
  '''


[[tool.tbump.field]]
# the name of the field
name = "extra"
# the default value to use, if there is no match
default = ""

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.

[[tool.tbump.file]]
src = "pyproject.toml"

[[tool.tbump.file]]
src = "OCX_Schema.xsd"
search = 'fixed="{current_version}"'

[[tool.tbump.file]]
src = "OCX_Schema.xsd"
search = 'ocx_schema//{current_version}'

[[tool.tbump.file]]
src = ".xsdata.xml"
search = '<Package>ocx_v{current_version}'


# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

[[tool.tbump.before_commit]]
name = "Generate data-bindings."
cmd = "xsdata generate OCX_Schema.xsd"

[[tool.tbump.before_commit]]
name = "Insert version string in databinding."
cmd = "python main.py {new_version}"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
